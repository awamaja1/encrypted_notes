type Note = record {
  id : nat;
  owner : principal;
  encrypted : text;
  shared_edit : vec principal;
  shared_read : vec principal;
};
type UserProfile = record {
  id : principal;
  username : text;
  email : text;
};

type SummaryRequest = record {
  text : text;
  content_type : opt text;
};

type SummaryResponse = record {
  summary : text;
  success : bool;
  processing_time : float64;
  compression_ratio : float64;
  method : text;
  error : opt text;
};

type ContentAnalysisRequest = record {
  text : text;
  context : opt text;
};

type ContentAnalysisResponse = record {
  content_type : text;
  language : text;
  confidence : float64;
  topics : vec text;
  sentiment : text;
  complexity_score : float64;
  success : bool;
  processing_time : float64;
};

type SemanticSearchRequest = record {
  text_query : text;
  content_pool : vec text;
  search_type : text;
  language : opt text;
};

type SemanticSearchResponse = record {
  results : vec SearchResult;
  suggestions : vec text;
  success : bool;
  processing_time : float64;
};

type SearchResult = record {
  content_id : text;
  relevance_score : float64;
  semantic_similarity : float64;
  keyword_match_score : float64;
  context_relevance : float64;
  snippet : text;
  highlights : vec text;
};

type AbstractSummaryRequest = record {
  text : text;
  summary_type : text;
  target_length : opt nat32;
  language : opt text;
  style : opt text;
};

type AbstractSummaryResponse = record {
  summary : text;
  original_sentences : vec text;
  generated_sentences : vec text;
  key_concepts : vec text;
  abstraction_level : float64;
  coherence_score : float64;
  success : bool;
  processing_time : float64;
};

service : {
  register_user : (text, text) -> ();
  get_profile : (principal) -> (opt UserProfile) query;
  get_registered_users : () -> (vec UserProfile) query;
  get_other_users : (principal) -> (vec UserProfile) query;
  whoami: () -> (principal) query;
  create_note : (text) -> (nat);
  get_note : (nat) -> (opt Note) query;
  delete_note : (nat) -> ();
  encrypted_symmetric_key_for_note : (nat, blob) -> (text);
  read_notes : () -> (vec Note);
  share_note_edit : (nat, principal) -> ();
  share_note_read : (nat, principal) -> ();
  symmetric_key_verification_key_for_note : () -> (text);
  unshare_note_edit : (nat, principal) -> ();
  unshare_note_read : (nat, principal) -> ();
  update_note : (nat, text) -> ();
  store_search_index : (text) -> ();
  get_search_index : () -> (opt text) query;
  get_search_index_info : () -> (opt nat64) query;
  delete_search_index : () -> (bool);
  ai_summarize : (SummaryRequest) -> (SummaryResponse);
  ai_health_check : () -> (text) query;
  
  // Advanced AI functions
  analyze_content : (ContentAnalysisRequest) -> (ContentAnalysisResponse);
  semantic_search : (SemanticSearchRequest) -> (SemanticSearchResponse);
  generate_abstract_summary : (AbstractSummaryRequest) -> (AbstractSummaryResponse);
}
